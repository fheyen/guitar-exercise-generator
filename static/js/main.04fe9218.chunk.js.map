{"version":3,"sources":["Patterns.js","MusicXmlGenerator.js","App.js","index.js"],"names":["patterns","Map","name","positions","generatePattern","patternType","rootNote","repeat","alternate","rootNotePositions","rootPos","indexOf","pattern","get","shiftedToRoot","map","d","result","reversed","reverse","repetition","App","props","download","state","type","tempo","timeSig","text","notesPerMeasure","split","currentMeasure","currentNoteInMeasure","measuresString","string","fret","tuning","Guitar","stringedTunings","note","getNoteInfoFromFretboardPos","octave","generateXml","fileName","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","textTab","this","toTextTab","timeStringMatrix","push","position","timeSlice","Array","from","length","str","time","console","log","setState","className","onChange","event","target","value","min","max","step","defaultValue","onInput","e","onClick","icon","faToggleOn","faToggleOff","readOnly","href","faGithub","PureComponent","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.04fe9218.chunk.js","sourcesContent":["const patterns = new Map([\n    ['pentatonic', {\n        name: 'Pentatonic Scale (6 strings)',\n        // String fret pairs, strings are 0 (E4) to 5 (E2)\n        positions: [\n            [6, 0],\n            [6, 3],\n            [5, 0],\n            [5, 2],\n            [4, 0],\n            [4, 2],\n            [3, 0],\n            [3, 2],\n            [2, 0],\n            [2, 3],\n            [1, 0],\n            [1, 3],\n        ]\n    }],\n]);\n\nexport default patterns;\n","import patterns from './Patterns';\nimport { Guitar } from 'musicvis-lib';\n\n/**\n * Takes a baseline pattern and moves it to the correct position on the fretboard\n *\n * @param {string} patternType pattern type\n * @param {string} rootNote root note\n * @returns {number[][]} array of [string, fret] positions\n */\nexport function generatePattern(patternType, rootNote = 'A', repeat = 1, alternate = false) {\n    const rootNotePositions = ['E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#'];\n    const rootPos = rootNotePositions.indexOf(rootNote);\n    const pattern = patterns.get(patternType);\n    const shiftedToRoot = pattern.positions.map(d => {\n        const [string, fret] = d;\n        return [string, fret + rootPos];\n    });\n    if (repeat === 1) {\n        return shiftedToRoot;\n\n    }\n    // Repeat with or without alternative diraction\n    let result = shiftedToRoot;\n    if (repeat > 1) {\n        let reversed = [...shiftedToRoot].reverse();\n        for (let repetition = 1; repetition < repeat; repetition++) {\n            if (alternate && repetition % 2 === 1) {\n                result = [...result, ...reversed];\n            } else {\n                result = [...result, ...shiftedToRoot];\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * Generates MusicXML text from a pattern\n *\n * @param {string} name name\n * @param {number} tempo tempo in bpm\n * @param {string} timeSig time signature e.g. 4/4\n * @param {number[][]} positions the output of generatePattern\n */\nexport function generateXml(name, tempo, timeSig, positions) {\n    timeSig = timeSig.split('/').map(d => +d);\n    const notesPerMeasure = timeSig[0];\n    let currentMeasure = 1;\n    let currentNoteInMeasure = 1;\n    let measuresString = '';\n    for (const [string, fret] of positions) {\n        if (currentNoteInMeasure > notesPerMeasure) {\n            // Start new measure\n            currentMeasure++;\n            currentNoteInMeasure = 1;\n            measuresString = `${measuresString}\n            </measure>\n            <measure number=\"${currentMeasure}\">`;\n        }\n        currentNoteInMeasure++;\n        // Get note and octave from position\n        const tuning = Guitar.stringedTunings.get('Guitar').get(6)[0];\n        const note = Guitar.getNoteInfoFromFretboardPos(string, fret, tuning);\n        measuresString = `${measuresString}\n            <note>\n                <pitch>\n                    <step>${note.name}</step>\n                    <octave>${note.octave}</octave>\n                </pitch>\n                <notations>\n                    <technical>\n                        <fret>${fret}</fret>\n                        <string>${string}</string>\n                    </technical>\n                </notations>\n                <voice>1</voice>\n                <duration>960</duration>\n                <type>quarter</type>\n            </note>`;\n    }\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n<score-partwise>\n    <work>\n        <work-title />\n    </work>\n    <identification>\n        <encoding>\n            <software>https://github.com/fheyen/guitar-exercise-generator</software>\n        </encoding>\n    </identification>\n    <part-list>\n        <score-part id=\"P1\">\n            <part-name>${name}</part-name>\n            <score-instrument id=\"P1-I1\">\n                <instrument-name>Steel String Guitar 1</instrument-name>\n            </score-instrument>\n            <midi-instrument id=\"P1-I1\">\n                <midi-channel>1</midi-channel>\n                <midi-program>26</midi-program>\n            </midi-instrument>\n        </score-part>\n    </part-list>\n    <part id=\"P1\">\n        <measure number=\"1\">\n            <attributes>\n                <divisions>960</divisions>\n                <key>\n                    <fifths>0</fifths>\n                    <mode>major</mode>\n                </key>\n                <clef>\n                    <sign>G</sign>\n                    <line>2</line>\n                </clef>\n                <time>\n                    <beats>${timeSig[0]}</beats>\n                    <beat-type>${timeSig[1]}</beat-type>\n                </time>\n                <staff-details>\n                    <staff-lines>6</staff-lines>\n                    <staff-tuning line=\"1\">\n                        <tuning-step>E</tuning-step>\n                        <tuning-octave>3</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"2\">\n                        <tuning-step>A</tuning-step>\n                        <tuning-octave>3</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"3\">\n                        <tuning-step>D</tuning-step>\n                        <tuning-octave>4</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"4\">\n                        <tuning-step>G</tuning-step>\n                        <tuning-octave>4</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"5\">\n                        <tuning-step>B</tuning-step>\n                        <tuning-octave>4</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"6\">\n                        <tuning-step>E</tuning-step>\n                        <tuning-octave>5</tuning-octave>\n                    </staff-tuning>\n                </staff-details>\n            </attributes>\n            <direction placement=\"above\">\n                <sound tempo=\"${tempo}\" />\n            </direction>\n           ${measuresString}\n        </measure>\n    </part>\n</score-partwise>\n`;\n}\n","import './App.css';\nimport React, { PureComponent } from 'react';\nimport { generatePattern, generateXml } from './MusicXmlGenerator';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { faToggleOff, faToggleOn } from '@fortawesome/free-solid-svg-icons';\n\nclass App extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: 'pentatonic',\n            rootNote: 'C',\n            tempo: 120,\n            timeSig: '4/4',\n            repeat: 4,\n            alternate: true,\n            textTab: '',\n        };\n    }\n\n    componentDidMount() {\n        this.toTextTab();\n    }\n\n    componentDidUpdate() {\n        this.toTextTab();\n    }\n\n    /**\n     * Renders preview as text tab\n     */\n    toTextTab() {\n        const { type, rootNote, repeat, alternate } = this.state;\n        // Generate XML\n        const pattern = generatePattern(type, rootNote, repeat, alternate);\n\n        const timeStringMatrix = [];\n        timeStringMatrix.push(['e-', 'B-', 'G-', 'D-', 'A-', 'E-']);\n        for (const position of pattern) {\n            const [string, fret] = position;\n            const timeSlice = Array.from({ length: 6 });\n            for (let str = 1; str <= 6; str++) {\n                if (str === string) {\n                    timeSlice[str - 1] = `${fret}-`;\n                } else {\n                    timeSlice[str - 1] = fret > 9 ? '---' : '--';\n                }\n            }\n            timeStringMatrix.push(timeSlice);\n        }\n        let result = '';\n        for (let string = 0; string < 6; string++) {\n            for (let time = 0; time < pattern.length; time++) {\n                result = `${result}${timeStringMatrix[time][string]}`;\n            }\n            result = `${result}\\n`;\n        }\n        console.log(result);\n        this.setState({ textTab: result });\n    }\n\n    /**\n     * Creates a downloadable MusicXML file\n     */\n    download = () => {\n        const { type, rootNote, tempo, timeSig, repeat, alternate } = this.state;\n        // Generate XML\n        const pattern = generatePattern(type, rootNote, repeat, alternate);\n        const name = `[Guitar Exercise] ${rootNote} ${type} ${tempo} bpm`;\n        const text = generateXml(name, tempo, timeSig, pattern);\n\n        // Download text file\n        const fileName = `${name}.musicxml`;\n        const element = document.createElement('a');\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n        element.setAttribute('download', fileName);\n        element.style.display = 'none';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Guitar Exercise Generator</h1>\n                <h2>Options</h2>\n                <div>\n                    <label>\n                        Type\n                        <select onChange={event => this.setState({ type: event.target.value })}>\n                            <option value='pentatonic'>\n                                Pentatonic Scale\n                        </option>\n                            <option value='heptatonic'>\n                                Heptatonic Scale\n                        </option>\n                        </select>\n                    </label>\n                    <label>\n                        Root note\n                        <select onChange={event => this.setState({ rootNote: event.target.value })}>\n                            {['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'].map(d => (\n                                <option key={d} value={d}>\n                                    {d}\n                                </option>\n                            ))}\n                        </select>\n                    </label>\n                    <label>\n                        Tempo (bpm)\n                        <input\n                            type='number'\n                            min='30'\n                            max='200'\n                            step='5'\n                            defaultValue='120'\n                            onInput={e => this.setState({ tempo: +e.target.value })}\n                        />\n                    </label>\n                    <label>\n                        Time signature\n                        <select onChange={event => this.setState({ timeSig: event.target.value })}>\n                            {['4/4', '3/4', '2/4'].map(d => (\n                                <option key={d} value={d}>\n                                    {d}\n                                </option>\n                            ))}\n                        </select>\n                    </label>\n                    <label>\n                        Repeat\n                        <input\n                            type='number'\n                            min='1'\n                            max='20'\n                            step='1'\n                            defaultValue='4'\n                            onInput={e => this.setState({ repeat: +e.target.value })}\n                        />\n                    </label>\n                    <label>\n                        <button onClick={() => this.setState({ alternate: !this.state.alternate })}>\n                            Alternate <FontAwesomeIcon icon={this.state.alternate ? faToggleOn : faToggleOff} />\n                        </button>\n                    </label>\n                </div>\n                <h2>Output</h2>\n                <div>\n                    <button onClick={this.download}>\n                        Download MusicXML\n                    </button>\n                </div>\n                <div>\n                    <textarea value={this.state.textTab} readOnly>\n                    </textarea>\n                </div>\n                <div className='githubLink'>\n                    <a href='https://github.com/fheyen/guitar-exercise-generator'>\n                        <FontAwesomeIcon icon={faGithub} />&nbsp;\n                        https://github.com/fheyen/guitar-exercise-generator\n                     </a>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}