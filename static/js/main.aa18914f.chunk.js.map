{"version":3,"sources":["guitar/Patterns.js","guitar/MusicXmlGenerator.js","lib.js","guitar/Guitar.jsx","piano/MusicXmlGenerator.js","piano/PianoKeyboard.js","piano/Piano.jsx","drums/Patterns.js","drums/MusicXmlGenerator.js","drums/Drums.jsx","App.js","index.js"],"names":["patterns","Map","name","rootNotePositions","positions","Array","from","length","flatMap","d","string","map","fret","generatePattern","patternType","rootNote","repeat","alternate","pattern","get","rootPos","indexOf","shiftedToRoot","result","reversed","reverse","repetition","downloadXml","fileName","xmlString","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","repeatPattern","nRepetitions","Guitar","props","download","state","type","tempo","timeSig","text","notesPerMeasure","split","currentMeasure","currentNoteInMeasure","measuresString","tuning","stringedTunings","note","getNoteInfoFromFretboardPos","octave","generateXml","currentAnimationPosition","index","this","setState","wait","Utils","bpmToSecondsPerBeat","window","setTimeout","animate","currPos","timeStringMatrix","push","position","timeSlice","str","tab","notesPerMeaure","noteOfMeasure","time","pattern2","fretboard","entries","i","typeOptions","key","value","stringNotes","hString","hFret","board","row","cName","className","onChange","event","target","min","max","step","defaultValue","onInput","e","onClick","icon","faToggleOn","faToggleOff","readOnly","disabled","title","PureComponent","scaleType","notes","scale","Scale","Midi","flatToSharp","has","PianoKeyboard","viewWidth","viewHeight","margin","Piano","pianoPitchRange","minPitch","maxPitch","whiteNotes","pitch","isSharp","pitchesInPattern","Set","getMidiNoteByNameAndOctave","height","top","bottom","keyWidth","left","right","blackKeyWidth","whiteKeys","blackKeys","labels","octaveMarkerPositions","currentX","black","getMidiNoteByNr","x","y","w","h","color","borderRadius","newKey","width","rx","ry","fill","stroke","strokeWidth","fontSize","textAnchor","alignmentBaseline","writingMode","textOrientation","octaveMarkers","octaveMarkerLabels","yPos","transform","description","alter","endsWith","slice","names","sort","join","hits","drumInstrumentMap","instr","notehead","stem","Drums","drumHits","hit","drum","console","warn","details","timeRowMatrix","App","currentInstrument","href","faGithub","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.aa18914f.chunk.js","sourcesContent":["/**\n * Contains patterns for exercises, such as scales\n */\nconst patterns = new Map([\n    ['pentatonic C type', {\n        name: 'Pentatonic scale C type',\n        rootNotePositions: ['A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A'],\n        // String fret pairs, strings are 0 (E4) to 5 (E2)\n        positions: [\n            [6, 1],\n            [6, 3],\n            [5, 1],\n            [5, 3],\n            [4, 0],\n            [4, 2],\n            [3, 0],\n            [3, 2],\n            [2, 1],\n            [2, 3],\n            [1, 0],\n            [1, 3],\n        ]\n    }],\n    ['pentatonic A type', {\n        name: 'Pentatonic scale A type',\n        rootNotePositions: ['A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A'],\n        // String fret pairs, strings are 0 (E4) to 5 (E2)\n        positions: [\n            [6, 1],\n            [6, 3],\n            [5, 1],\n            [5, 3],\n            [4, 0],\n            [4, 3],\n            [3, 0],\n            [3, 3],\n            [2, 1],\n            [2, 3],\n            [1, 1],\n            [1, 3],\n        ]\n    }],\n    ['pentatonic G type', {\n        name: 'Pentatonic scale G type',\n        rootNotePositions: ['G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#'],\n        // String fret pairs, strings are 0 (E4) to 5 (E2)\n        positions: [\n            [6, 0],\n            [6, 3],\n            [5, 0],\n            [5, 2],\n            [4, 0],\n            [4, 2],\n            [3, 0],\n            [3, 2],\n            [2, 0],\n            [2, 3],\n            [1, 0],\n            [1, 3],\n        ]\n    }],\n    ['pentatonic E type', {\n        name: 'Pentatonic scale E type',\n        rootNotePositions: ['F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E'],\n        // String fret pairs, strings are 0 (E4) to 5 (E2)\n        positions: [\n            [6, 1],\n            [6, 3],\n            [5, 0],\n            [5, 3],\n            [4, 0],\n            [4, 3],\n            [3, 0],\n            [3, 2],\n            [2, 1],\n            [2, 3],\n            [1, 1],\n            [1, 3],\n        ]\n    }],\n    ['pentatonic D type', {\n        name: 'Pentatonic scale D type',\n        rootNotePositions: ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#'],\n        // String fret pairs, strings are 0 (E4) to 5 (E2)\n        positions: [\n            [6, 1],\n            [6, 3],\n            [5, 1],\n            [5, 3],\n            [4, 1],\n            [4, 3],\n            [3, 0],\n            [3, 3],\n            [2, 1],\n            [2, 4],\n            [1, 1],\n            [1, 3],\n        ]\n    }],\n    ['pentatonic all', {\n        name: 'Pentatonic scale all',\n        rootNotePositions: ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'],\n        // String fret pairs, strings are 0 (E4) to 5 (E2)\n        positions: [\n            // C\n            [6, 0],\n            [6, 3],\n            [5, 0],\n            [5, 3],\n            [4, 0],\n            [4, 2],\n            [3, 0],\n            [3, 2],\n            [2, 1],\n            [2, 3],\n            [1, 0],\n            [1, 3],\n            // A\n            [6, 3],\n            [6, 5],\n            [5, 3],\n            [5, 5],\n            [4, 2],\n            [4, 5],\n            [3, 2],\n            [3, 5],\n            [2, 3],\n            [2, 5],\n            [1, 3],\n            [1, 5],\n            // G\n            [6, 5],\n            [6, 8],\n            [5, 5],\n            [5, 7],\n            [4, 5],\n            [4, 7],\n            [3, 5],\n            [3, 7],\n            [2, 5],\n            [2, 8],\n            [1, 5],\n            [1, 8],\n            // E\n            [6, 8],\n            [6, 10],\n            [5, 7],\n            [5, 10],\n            [4, 7],\n            [4, 9],\n            [3, 7],\n            [3, 9],\n            [2, 8],\n            [2, 10],\n            [1, 8],\n            [1, 10],\n            // D\n            [6, 10],\n            [6, 12],\n            [5, 10],\n            [5, 12],\n            [4, 10],\n            [4, 12],\n            [3, 9],\n            [3, 12],\n            [2, 10],\n            [2, 13],\n            [1, 10],\n            [1, 12],\n            // C\n            [6, 12],\n            [6, 15],\n            [5, 12],\n            [5, 15],\n            [4, 12],\n            [4, 14],\n            [3, 12],\n            [3, 14],\n            [2, 13],\n            [2, 15],\n            [1, 12],\n            [1, 15],\n        ],\n    }],\n\n    /**\n     * Heptatonic scales\n     */\n    ['haptatonic C type', {\n        name: 'Heptatonic scale C type',\n        rootNotePositions: ['A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A'],\n        // String fret pairs, strings are 0 (E4) to 5 (E2)\n        positions: [\n            [6, 1],\n            [6, 3],\n            [5, 1],\n            [5, 3],\n            [4, 0],\n            [4, 2],\n            [3, 0],\n            [3, 2],\n            [2, 1],\n            [2, 3],\n            [1, 0],\n            [1, 3],\n        ]\n    }],\n\n    // TODO: other heptatonic patterns\n    // TODO: all heptatonic patterns in one\n\n    /**\n     * Rows\n     */\n    ['rows of 4, left-right', {\n        name: 'Rows left-right',\n        rootNotePositions: ['E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#'],\n        positions: Array.from({ length: 6 }).flatMap((d, string) =>\n            Array.from({ length: 4 }).map((d, fret) => [6 - string, fret])\n        )\n    }],\n    ['rows of 4, right-left', {\n        name: 'Rows right-left',\n        rootNotePositions: ['E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#'],\n        positions: Array.from({ length: 6 }).flatMap((d, string) =>\n            Array.from({ length: 4 }).map((d, fret) => [6 - string, 3 - fret])\n        )\n    }],\n    ['rows of 4, left-right and right-left', {\n        name: 'Rows left-right and right-left',\n        rootNotePositions: ['E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#'],\n        positions: Array.from({ length: 6 }).flatMap((d, string) =>\n            Array.from({ length: 4 }).map((d, fret) => [6 - string, string % 2 === 0 ? fret : 3 - fret])\n        )\n    }],\n]);\n\nexport default patterns;\n","import patterns from './Patterns';\nimport { Guitar } from 'musicvis-lib';\n\n\n/**\n * Takes a baseline pattern and moves it to the correct position on the fretboard\n *\n * @param {string} patternType pattern type\n * @param {string} rootNote root note\n * @returns {number[][]} array of [string, fret] positions\n */\nexport function generatePattern(patternType, rootNote = 'A', repeat = 1, alternate = false) {\n    const pattern = patterns.get(patternType);\n    const rootPos = pattern.rootNotePositions.indexOf(rootNote);\n    const shiftedToRoot = pattern.positions.map(d => {\n        const [string, fret] = d;\n        return [string, fret + rootPos];\n    });\n    if (repeat === 1) {\n        return shiftedToRoot;\n    }\n    // Repeat with or without alternative direction\n    let result = shiftedToRoot;\n    if (repeat > 1) {\n        let reversed = [...shiftedToRoot].reverse();\n        for (let repetition = 1; repetition < repeat; repetition++) {\n            if (alternate && repetition % 2 === 1) {\n                result = [...result, ...reversed];\n            } else {\n                result = [...result, ...shiftedToRoot];\n            }\n        }\n    }\n    // console.log(pattern);\n    return result;\n}\n\n/**\n * Generates MusicXML text from a pattern\n *\n * @param {string} name name\n * @param {number} tempo tempo in bpm\n * @param {string} timeSig time signature e.g. 4/4\n * @param {number[][]} positions the output of generatePattern\n */\nexport function generateXml(name, tempo, timeSig, positions) {\n    timeSig = timeSig.split('/').map(d => +d);\n    const notesPerMeasure = timeSig[0];\n    let currentMeasure = 1;\n    let currentNoteInMeasure = 1;\n    let measuresString = '';\n    for (const [string, fret] of positions) {\n        if (currentNoteInMeasure > notesPerMeasure) {\n            // Start new measure\n            currentMeasure++;\n            currentNoteInMeasure = 1;\n            measuresString = `${measuresString}\n            </measure>\n            <measure number=\"${currentMeasure}\">`;\n        }\n        currentNoteInMeasure++;\n        // Get note and octave from position\n        const tuning = Guitar.stringedTunings.get('Guitar').get(6)[0];\n        const note = Guitar.getNoteInfoFromFretboardPos(string, fret, tuning);\n        measuresString = `${measuresString}\n            <note>\n                <pitch>\n                    <step>${note.name}</step>\n                    <octave>${note.octave}</octave>\n                </pitch>\n                <notations>\n                    <technical>\n                        <fret>${fret}</fret>\n                        <string>${string}</string>\n                    </technical>\n                </notations>\n                <voice>1</voice>\n                <duration>960</duration>\n                <type>quarter</type>\n            </note>`;\n    }\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n<score-partwise>\n    <work>\n        <work-title />\n    </work>\n    <identification>\n        <encoding>\n            <software>https://github.com/fheyen/music-exercise-generator</software>\n        </encoding>\n    </identification>\n    <part-list>\n        <score-part id=\"P1\">\n            <part-name>${name}</part-name>\n            <score-instrument id=\"P1-I1\">\n                <instrument-name>Steel String Guitar 1</instrument-name>\n            </score-instrument>\n            <midi-instrument id=\"P1-I1\">\n                <midi-channel>1</midi-channel>\n                <midi-program>26</midi-program>\n            </midi-instrument>\n        </score-part>\n    </part-list>\n    <part id=\"P1\">\n        <measure number=\"1\">\n            <attributes>\n                <divisions>960</divisions>\n                <key>\n                    <fifths>0</fifths>\n                    <mode>major</mode>\n                </key>\n                <clef>\n                    <sign>G</sign>\n                    <line>2</line>\n                </clef>\n                <time>\n                    <beats>${timeSig[0]}</beats>\n                    <beat-type>${timeSig[1]}</beat-type>\n                </time>\n                <staff-details>\n                    <staff-lines>6</staff-lines>\n                    <staff-tuning line=\"1\">\n                        <tuning-step>E</tuning-step>\n                        <tuning-octave>3</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"2\">\n                        <tuning-step>A</tuning-step>\n                        <tuning-octave>3</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"3\">\n                        <tuning-step>D</tuning-step>\n                        <tuning-octave>4</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"4\">\n                        <tuning-step>G</tuning-step>\n                        <tuning-octave>4</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"5\">\n                        <tuning-step>B</tuning-step>\n                        <tuning-octave>4</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"6\">\n                        <tuning-step>E</tuning-step>\n                        <tuning-octave>5</tuning-octave>\n                    </staff-tuning>\n                </staff-details>\n            </attributes>\n            <direction placement=\"above\">\n                <sound tempo=\"${tempo}\" />\n            </direction>\n           ${measuresString}\n        </measure>\n    </part>\n</score-partwise>\n`;\n}\n","/**\n * Triggers an MusicXML file\n *\n * @param {string} fileName file name\n * @param {string} xmlString XML string\n */\nexport function downloadXml(fileName, xmlString) {\n    const element = document.createElement('a');\n    element.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(xmlString)}`);\n    element.setAttribute('download', fileName);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n};\n\n/**\n * Repeats a pattern with or without alternating direction\n * @param {number} nRepetitions number of repetitions\n * @param {*[]} pattern pattern\n * @param {boolean} alternate alternate direction?\n * @returns {*[]} repeated pattern\n */\nexport function repeatPattern(nRepetitions, pattern, alternate) {\n    let result = pattern;\n    if (nRepetitions > 1) {\n        let reversed = [...pattern].reverse();\n        for (let repetition = 1; repetition < nRepetitions; repetition++) {\n            if (alternate && repetition % 2 === 1) {\n                result = [...result, ...reversed];\n            } else {\n                result = [...result, ...pattern];\n            }\n        }\n    }\n    return result;\n}\n","import './Guitar.css';\nimport React, { PureComponent } from 'react';\nimport { generatePattern, generateXml } from './MusicXmlGenerator';\nimport patterns from './Patterns';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faToggleOff, faToggleOn } from '@fortawesome/free-solid-svg-icons';\nimport { Utils } from 'musicvis-lib';\nimport { downloadXml } from '../lib';\n\nclass Guitar extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: 'pentatonic G type',\n            rootNote: 'C',\n            tempo: 120,\n            timeSig: '4/4',\n            repeat: 4,\n            alternate: true,\n            pattern: [],\n            currentAnimationPosition: null,\n        };\n    }\n\n    /**\n     * Animates the fretboard\n     * @param {number} index\n     * @param {number[][]} pattern\n     * @param {number} tempo\n     */\n    animate(index, pattern, tempo) {\n        if (index > pattern.length - 1) {\n            this.setState({ currentAnimationPosition: null });\n            return;\n        }\n        const [string, fret] = pattern[index];\n        this.setState({ currentAnimationPosition: [string, fret] });\n        const wait = Utils.bpmToSecondsPerBeat(tempo) * 1000;\n        window.setTimeout(\n            () => this.animate(index + 1, pattern, tempo),\n            wait\n        );\n    }\n\n    /**\n     * Creates a downloadable MusicXML file\n     */\n    download = () => {\n        const { type, rootNote, tempo, timeSig, repeat, alternate } = this.state;\n        // Generate pattern\n        const pattern = generatePattern(type, rootNote, repeat, alternate);\n        // Generate XML\n        const name = `[Guitar Exercise] ${rootNote} ${type} ${tempo} bpm`;\n        const text = generateXml(name, tempo, timeSig, pattern);\n        // Download text file\n        const fileName = `${name}.musicxml`;\n        downloadXml(fileName, text);\n    };\n\n    render() {\n        const { type, rootNote, tempo, timeSig, repeat, alternate, currentAnimationPosition: currPos } = this.state;\n        // Generate pattern\n        const pattern = generatePattern(type, rootNote, repeat, alternate);\n\n        // Create tab note-by-note\n        const timeStringMatrix = [];\n        timeStringMatrix.push(['e -', 'B -', 'G -', 'D -', 'A -', 'E -']);\n        for (const position of pattern) {\n            const [string, fret] = position;\n            const timeSlice = Array.from({ length: 6 });\n            for (let str = 1; str <= 6; str++) {\n                if (str === string) {\n                    timeSlice[str - 1] = `${fret}-`;\n                } else {\n                    timeSlice[str - 1] = fret > 9 ? '---' : '--';\n                }\n            }\n            timeStringMatrix.push(timeSlice);\n        }\n        // Transform into string row-by-row\n        let tab = `tempo = ${tempo} bpm\\n`;\n        const notesPerMeaure = +timeSig.split('/')[0];\n        for (let string = 0; string < 6; string++) {\n            // Measure lines\n            let noteOfMeasure = 0;\n            for (let time = 0; time < timeStringMatrix.length; time++) {\n                tab = `${tab}${timeStringMatrix[time][string]}`;\n                if (noteOfMeasure === notesPerMeaure && time < timeStringMatrix.length - 1) {\n                    noteOfMeasure = 0;\n                    tab = `${tab}|-`;\n                }\n                noteOfMeasure++;\n            }\n            tab = `${tab}\\n`;\n        }\n\n        // Create fretboard preview\n        const pattern2 = generatePattern(type, rootNote);\n        const fretboard = Array.from({ length: 6 }).map(() => Array.from({ length: 25 }));\n        for (const [i, position] of pattern2.entries()) {\n            const [string, fret] = position;\n            fretboard[string - 1][fret] = i + 1;\n            // fretboard[string - 1][fret + 12] = i + 1 + pattern2.length;\n        }\n        // Options for pattern type\n        const typeOptions = [];\n        for (const [key, value] of patterns) {\n            typeOptions.push(\n                <option key={key} value={key}>\n                    {value.name}\n                </option>\n            );\n        }\n        // Transform fretboard preview into JSX table\n        const stringNotes = ['e', 'B', 'G', 'D', 'A', 'E'];\n        const [hString, hFret] = currPos ?? [-1, -1];\n        const board = fretboard.map((row, string) => {\n            return (\n                <tr key={row}>\n                    <td key='note'>{stringNotes[string]}</td>\n                    {row.map((value, fret) => {\n                        let cName = '';\n                        if (string + 1 === hString && fret == hFret) {\n                            cName = 'highlight';\n                        }\n                        return (\n                            <td\n                                key={`${string} ${fret} ${value}`}\n                                className={cName}\n                            >\n                                {value}\n                            </td>\n                        );\n                    })}\n                </tr>\n            );\n        });\n        // HTML\n        return (\n            <div className=\"App\">\n                <h2>Options</h2>\n                <div>\n                    <label>\n                        Type\n                        <select onChange={event => this.setState({ type: event.target.value })}>\n                            {typeOptions}\n                        </select>\n                    </label>\n                    <label>\n                        Root note\n                        <select onChange={event => this.setState({ rootNote: event.target.value })}>\n                            {['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'].map(d => (\n                                <option key={d} value={d}>\n                                    {d}\n                                </option>\n                            ))}\n                        </select>\n                    </label>\n                    <label>\n                        Tempo (bpm)\n                        <input\n                            type='number'\n                            min='30'\n                            max='200'\n                            step='5'\n                            defaultValue='120'\n                            onInput={e => this.setState({ tempo: +e.target.value })}\n                        />\n                    </label>\n                    <label>\n                        Time signature\n                        <select onChange={event => this.setState({ timeSig: event.target.value })}>\n                            {['4/4', '3/4', '2/4'].map(d => (\n                                <option key={d} value={d}>\n                                    {d}\n                                </option>\n                            ))}\n                        </select>\n                    </label>\n                    <label>\n                        Repeat\n                        <input\n                            type='number'\n                            min='1'\n                            max='20'\n                            step='1'\n                            defaultValue='4'\n                            onInput={e => this.setState({ repeat: +e.target.value })}\n                        />\n                    </label>\n                    <label>\n                        <button onClick={() => this.setState({ alternate: !this.state.alternate })}>\n                            Alternate <FontAwesomeIcon icon={this.state.alternate ? faToggleOn : faToggleOff} />\n                        </button>\n                    </label>\n                </div>\n                <h2>Output</h2>\n                <div>\n                    <button onClick={this.download}>\n                        Download MusicXML\n                    </button>\n                </div>\n                <div>\n                    <h3>Tab Preview</h3>\n                    <textarea value={tab} readOnly>\n                    </textarea>\n                    <h3>Fretboard Preview</h3>\n                    <table>\n                        <tbody>\n                            {board}\n                            <tr>\n                                <td></td>\n                                {Array.from({ length: 25 }).map((d, i) => (\n                                    <td key={i}>{i}</td>\n                                ))}\n                            </tr>\n                        </tbody>\n                    </table>\n                    <button\n                        onClick={() => this.animate(0, pattern, tempo)}\n                        disabled={currPos !== null}\n                        title='Play the pattern on the fretboard at the set tempo'\n                    >\n                        Animate\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Guitar;\n","import { Scale } from '@tonaljs/tonal';\nimport { repeatPattern } from '../lib';\nimport { Midi } from 'musicvis-lib';\n\n/**\n * Takes a baseline pattern and moves it to the correct position on the fretboard\n *\n * @param {string} patternType pattern type\n * @param {string} rootNote root note\n * @returns {number[][]} array of [string, fret] positions\n */\nexport function generatePattern(\n    patternType,\n    rootNote = 'A',\n    scaleType = 'major',\n    repeat = 1,\n    alternate = false\n) {\n    let notes = [];\n    if (patternType === 'Scale') {\n        const scale = Scale.get(`${rootNote} ${scaleType}`);\n        for (let octave = 1; octave < 8; octave++) {\n            for (let note of scale.notes) {\n                if (Midi.flatToSharp.has(note)) {\n                    note = Midi.flatToSharp.get(note);\n                }\n                notes.push([note, octave]);\n            }\n        }\n    }\n    // Repeat with or without alternative direction\n    return repeatPattern(repeat, notes, alternate);\n}\n\n/**\n * Generates MusicXML text from a pattern\n *\n * @param {string} name name\n * @param {number} tempo tempo in bpm\n * @param {string} timeSig time signature e.g. 4/4\n * @param {{note:string, octave:number}} notes the output of generatePattern\n */\nexport function generateXml(name, tempo, timeSig, notes) {\n    timeSig = timeSig.split('/').map(d => +d);\n    const notesPerMeasure = timeSig[0];\n    let currentMeasure = 1;\n    let currentNoteInMeasure = 1;\n    let measuresString = '';\n    for (let [note, octave] of notes) {\n        if (currentNoteInMeasure > notesPerMeasure) {\n            // Start new measure\n            currentMeasure++;\n            currentNoteInMeasure = 1;\n            measuresString = `${measuresString}\n            </measure>\n            <measure number=\"${currentMeasure}\">`;\n        }\n        currentNoteInMeasure++;\n        // Handle sharp / flat\n        // TODO: this assumes C major as signature, but should be fine\n        let alter = 0;\n        if (note.endsWith('#')) {\n            note = note.slice(0, -1);\n            alter = 1;\n        }\n        measuresString = `${measuresString}\n            <note>\n                <pitch>\n                    <step>${note}</step>${alter === 0 ? '' : `\n                    <alter>${alter}</alter>`}\n                    <octave>${octave}</octave>\n                </pitch>\n                <duration>1</duration>\n                <voice>1</voice>\n                <type>quarter</type>\n            </note>`;\n    }\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE score-partwise PUBLIC \"-//Recordare//DTD MusicXML 3.1 Partwise//EN\" \"http://www.musicxml.org/dtds/partwise.dtd\">\n<score-partwise version=\"3.1\">\n  <work>\n    <work-title>${name}</work-title>\n    </work>\n  <identification>\n    <creator type=\"composer\">https://github.com/fheyen/instrument-exercise-generator</creator>\n    <encoding>\n      <software>https://github.com/fheyen/instrument-exercise-generator</software>\n      <encoding-date>2021-02-12</encoding-date>\n      <supports element=\"accidental\" type=\"yes\"/>\n      <supports element=\"beam\" type=\"yes\"/>\n      <supports element=\"print\" attribute=\"new-page\" type=\"yes\" value=\"yes\"/>\n      <supports element=\"print\" attribute=\"new-system\" type=\"yes\" value=\"yes\"/>\n      <supports element=\"stem\" type=\"yes\"/>\n      </encoding>\n    </identification>\n  <defaults>\n    <scaling>\n      <millimeters>7.05556</millimeters>\n      <tenths>40</tenths>\n      </scaling>\n    <page-layout>\n      <page-height>1683.36</page-height>\n      <page-width>1190.88</page-width>\n      <page-margins type=\"even\">\n        <left-margin>56.6929</left-margin>\n        <right-margin>56.6929</right-margin>\n        <top-margin>56.6929</top-margin>\n        <bottom-margin>113.386</bottom-margin>\n        </page-margins>\n      <page-margins type=\"odd\">\n        <left-margin>56.6929</left-margin>\n        <right-margin>56.6929</right-margin>\n        <top-margin>56.6929</top-margin>\n        <bottom-margin>113.386</bottom-margin>\n        </page-margins>\n      </page-layout>\n    <word-font font-family=\"FreeSerif\" font-size=\"10\"/>\n    <lyric-font font-family=\"FreeSerif\" font-size=\"11\"/>\n    </defaults>\n  <credit page=\"1\">\n    <credit-words default-x=\"595.44\" default-y=\"1626.67\" justify=\"center\" valign=\"top\" font-size=\"24\">${name}</credit-words>\n    </credit>\n  <credit page=\"1\">\n    <credit-words default-x=\"1134.19\" default-y=\"1526.67\" justify=\"right\" valign=\"bottom\" font-size=\"12\">https://github.com/fheyen/instrument-exercise-generator\n</credit-words>\n    </credit>\n  <part-list>\n    <score-part id=\"P1\">\n      <part-name>Piano</part-name>\n      <part-abbreviation>Pno.</part-abbreviation>\n      <score-instrument id=\"P1-I1\">\n        <instrument-name>Piano</instrument-name>\n        </score-instrument>\n      <midi-device id=\"P1-I1\" port=\"1\"></midi-device>\n      <midi-instrument id=\"P1-I1\">\n        <midi-channel>1</midi-channel>\n        <midi-program>1</midi-program>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      </score-part>\n    </part-list>\n  <part id=\"P1\">\n    <measure number=\"1\" width=\"315.37\">\n      <print>\n        <system-layout>\n          <system-margins>\n            <left-margin>0.00</left-margin>\n            <right-margin>-0.00</right-margin>\n            </system-margins>\n          <top-system-distance>170.00</top-system-distance>\n          </system-layout>\n        </print>\n      <attributes>\n        <divisions>1</divisions>\n        <key>\n          <fifths>0</fifths>\n          </key>\n        <time>\n          <beats>${timeSig[0]}</beats>\n          <beat-type>${timeSig[1]}</beat-type>\n          </time>\n        <clef>\n          <sign>G</sign>\n          <line>2</line>\n          </clef>\n        </attributes>\n      <direction placement=\"above\">\n        <direction-type>\n          <metronome parentheses=\"no\" default-x=\"-35.96\" relative-y=\"20.00\">\n            <beat-unit>quarter</beat-unit>\n            <per-minute>${tempo}</per-minute>\n            </metronome>\n          </direction-type>\n        <sound tempo=\"${tempo}\"/>\n        </direction>\n        ${measuresString}\n      </measure>\n    </part>\n  </score-partwise>\n`;\n}\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Scale } from '@tonaljs/tonal';\nimport { Piano, Utils, Midi } from 'musicvis-lib';\n\n/**\n * @component\n */\nclass PianoKeyboard extends PureComponent {\n\n    /**\n     * @returns {JSX} jsx\n     */\n    render() {\n        const { viewWidth, viewHeight, margin, pattern, rootNote } = this.props;\n        const { minPitch, maxPitch } = Piano.pianoPitchRange.get(88);\n        const whiteNotes = [];\n        for (let pitch = minPitch; pitch <= maxPitch; pitch++) {\n            if (!Midi.isSharp(pitch)) {\n                whiteNotes.push(pitch);\n            }\n        }\n        // Notes in pattern are highlighted\n        const pitchesInPattern = new Set(pattern.map(d => Midi.getMidiNoteByNameAndOctave(...d).pitch));\n        // Keys\n        const height = viewHeight - margin.top - margin.bottom;\n        const keyWidth = (viewWidth - margin.left - margin.right) / whiteNotes.length;\n        const blackKeyWidth = keyWidth * 0.9;\n        const whiteKeys = [];\n        const blackKeys = [];\n        const labels = [];\n        const octaveMarkerPositions = [];\n        let currentX = 0;\n        for (let octave = -1; octave < 11; octave++) {\n            for (let key = 0; key < 12; key++) {\n                const pitch = octave * 12 + key;\n                if (pitch < minPitch || pitch > maxPitch) {\n                    continue;\n                }\n                const black = Midi.isSharp(pitch);\n                const note = Midi.getMidiNoteByNr(pitch);\n                // Position and size\n                const x = black ? currentX - (0.5 * blackKeyWidth) : currentX;\n                const y = black ? 0 : height * 0.02;\n                const w = black ? blackKeyWidth : keyWidth;\n                const h = black ? height * 0.6 : height * 0.98;\n                if (pitch % 12 === 0) {\n                    octaveMarkerPositions.push({ octave, x });\n                }\n                // Colors\n                let color = '#f8f8f8';\n                let textColor = '#111';\n                let borderRadius = 5;\n                if (pitchesInPattern.has(pitch)) {\n                    // color = Utils.noteColorFromPitch(pitch);\n                    color = 'steelblue';\n                    // Show that this is the key of the scale\n                    if (note.name === rootNote) {\n                        borderRadius = 0;\n                    }\n                }\n                // color = black ? '#222' : '#f8f8f8';\n                // textColor = black ? '#eee' : '#222';\n                const newKey = (\n                    <rect\n                        key={pitch}\n                        width={w}\n                        height={h}\n                        x={x}\n                        y={y}\n                        rx={borderRadius}\n                        ry={borderRadius}\n                        fill={color}\n                        stroke='#888'\n                        strokeWidth='0.5'\n                    >\n                    </rect>\n                );\n                labels.push((\n                    <text\n                        key={pitch}\n                        fontSize='10px'\n                        style={{\n                            fill: textColor,\n                            textAnchor: 'middle',\n                            alignmentBaseline: 'baseline',\n                            writingMode: 'vertical-lr',\n                            textOrientation: 'upright',\n                        }}\n                        x={x + 0.5 * w}\n                        y={black ? h - 18 : h - 10}\n                    >\n                        {note.name}\n                    </text>\n                ));\n                if (black) {\n                    blackKeys.push(newKey);\n                } else {\n                    whiteKeys.push(newKey);\n                    currentX += keyWidth;\n                }\n            }\n        }\n        // Octave indicators\n        const octaveMarkers = [];\n        const octaveMarkerLabels = [];\n        const yPos = height + 15;\n        for (let index = 0; index < octaveMarkerPositions.length - 1; index++) {\n            const left = octaveMarkerPositions[index].x + 2;\n            const right = octaveMarkerPositions[index + 1].x - 2;\n            const d = `\n                M ${left} ${yPos - 10}\n                L ${left} ${yPos}\n                L ${right} ${yPos}\n                L ${right} ${yPos - 10}\n            `;\n            octaveMarkers.push((\n                <path\n                    key={d}\n                    fill='none'\n                    stroke='#888'\n                    d={d}\n                />\n            ));\n            octaveMarkerLabels.push((\n                <text\n                    key={d}\n                    textAnchor='middle'\n                    x={(left + right) / 2}\n                    y={yPos + 12}\n                    fill='#eee'\n                    fontSize={12}\n                >\n                    Octave {octaveMarkerPositions[index].octave - 1}\n                </text>\n            ));\n        }\n        // HTML\n        return (\n            <div\n                className={`PianoKeyboard`}\n            >\n                <svg\n                    width={viewWidth}\n                    height={viewHeight}\n                >\n                    <g transform={`translate(${margin.left}, ${margin.top})`}>\n                        {whiteKeys}\n                        {blackKeys}\n                        {labels}\n                        {octaveMarkers}\n                        {octaveMarkerLabels}\n                    </g>\n                </svg>\n            </div >\n        );\n    }\n}\n\n\nPianoKeyboard.propTypes = {\n    viewWidth: PropTypes.number.isRequired,\n    viewHeight: PropTypes.number.isRequired,\n    pattern: PropTypes.arrayOf(PropTypes.array).isRequired,\n};\n\nexport default PianoKeyboard;\n","// import './Guitar.css';\nimport React, { PureComponent } from 'react';\nimport { generatePattern, generateXml } from './MusicXmlGenerator';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faToggleOff, faToggleOn } from '@fortawesome/free-solid-svg-icons';\nimport { Utils } from 'musicvis-lib';\nimport { downloadXml } from '../lib';\nimport { Scale } from '@tonaljs/tonal';\nimport PianoKeyboard from './PianoKeyboard';\n\nclass Piano extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: 'Scale',\n            rootNote: 'C',\n            scaleType: 'major',\n            tempo: 120,\n            timeSig: '4/4',\n            repeat: 4,\n            alternate: true,\n            currentAnimationPosition: null,\n        };\n    }\n\n    /**\n     * Creates a downloadable MusicXML file\n     */\n    download = () => {\n        const { type, rootNote, scaleType, tempo, timeSig, repeat, alternate } = this.state;\n        // Generate pattern\n        const pattern = generatePattern(type, rootNote, scaleType, repeat, alternate);\n        // Generate XML\n        let description = '';\n        if (type === 'Scale') {\n            description = `${rootNote} ${scaleType} scale`;\n        }\n        const name = `[Piano Exercise] ${description} ${tempo} bpm`;\n        const text = generateXml(name, tempo, timeSig, pattern);\n        // Download text file\n        const fileName = `${name}.musicxml`;\n        downloadXml(fileName, text);\n    };\n\n    render() {\n        const { type, rootNote, scaleType, tempo, timeSig, repeat, alternate, currentAnimationPosition: currPos } = this.state;\n        // Pattern for preview\n        const pattern = generatePattern(type, rootNote, scaleType, 1, false);\n        return (\n            <div className=\"App\">\n                <h2>Options</h2>\n                <div>\n                    <label>\n                        Type\n                        <select onChange={event => this.setState({ type: event.target.value })}>\n                            {['Scale'].map(d => (\n                                <option key={d} value={d}>\n                                    {d}\n                                </option>\n                            ))}\n                        </select>\n                    </label>\n                    {type === 'Scale' &&\n                        <div>\n                            <label>\n                                Root note\n                                <select onChange={event => this.setState({ rootNote: event.target.value })}>\n                                    {['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'].map(d => (\n                                        <option key={d} value={d}>\n                                            {d}\n                                        </option>\n                                    ))}\n                                </select>\n                            </label>\n                            <label>\n                                Scale\n                                <select\n                                    title='Scale name'\n                                    onChange={(event) => this.setState({ scaleType: event.target.value })}\n                                    defaultValue={scaleType}\n                                >\n                                    {Scale.names().sort().map(d => (\n                                        <option key={d} value={d}>{d}</option>\n                                    ))}\n                                </select>\n                            </label>\n                            <span>\n                                Notes: {Scale.get(`${rootNote} ${scaleType}`).notes.join(' ')}\n                            </span>\n                        </div>\n                    }\n                    <label>\n                        Tempo (bpm)\n                        <input\n                            type='number'\n                            min='30'\n                            max='200'\n                            step='5'\n                            defaultValue='120'\n                            onInput={e => this.setState({ tempo: +e.target.value })}\n                        />\n                    </label>\n                    <label>\n                        Time signature\n                        <select onChange={event => this.setState({ timeSig: event.target.value })}>\n                            {['4/4', '3/4', '2/4'].map(d => (\n                                <option key={d} value={d}>\n                                    {d}\n                                </option>\n                            ))}\n                        </select>\n                    </label>\n                    <label>\n                        Repeat\n                        <input\n                            type='number'\n                            min='1'\n                            max='20'\n                            step='1'\n                            defaultValue='4'\n                            onInput={e => this.setState({ repeat: +e.target.value })}\n                        />\n                    </label>\n                    <label>\n                        <button onClick={() => this.setState({ alternate: !this.state.alternate })}>\n                            Alternate <FontAwesomeIcon icon={this.state.alternate ? faToggleOn : faToggleOff} />\n                        </button>\n                    </label>\n                </div>\n                <h2>Output</h2>\n                <div>\n                    <button onClick={this.download}>\n                        Download MusicXML\n                    </button>\n                </div>\n                <div>\n                    <h3>Keyboard Preview</h3>\n                    <PianoKeyboard\n                        viewWidth={800}\n                        viewHeight={200}\n                        margin={{ top: 10, right: 10, bottom: 30, left: 10 }}\n                        pattern={pattern}\n                        rootNote={rootNote}\n\n                    />\n                    {/* <button\n                        onClick={() => this.animate(0)}\n                        disabled={currPos !== null}\n                        title='Play the pattern on the fretboard at the set tempo'\n                    >\n                        Animate\n                    </button> */}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Piano;\n","/**\n * Contains patterns for exercises, such as scales\n */\nconst patterns = new Map([\n    ['Snare only', {\n        name: 'Snare only',\n        // 'Chords' of drums to hit, e.g. ['bass', 'snare'] means hitting them both at the same time\n        hits: [\n            ['snare'],\n        ]\n    }],\n    ['Bass only', {\n        name: 'Bass only',\n        hits: [\n            ['bass'],\n        ]\n    }],\n    ['Snare and bass alternating', {\n        name: 'Snare and bass alternating',\n        hits: [\n            ['snare'],\n            ['bass'],\n        ]\n    }],\n    ['Snare and bass together', {\n        name: 'Snare and bass together',\n        hits: [\n            ['snare', 'bass'],\n        ]\n    }],\n    ['Snare and bass alternating / together', {\n        name: 'Snare and bass alternating / together',\n        hits: [\n            ['snare'],\n            ['snare', 'bass'],\n        ]\n    }],\n    ['Snare and bass alternating / together 2', {\n        name: 'Snare and bass alternating / together 2',\n        hits: [\n            ['snare', 'bass'],\n            ['bass'],\n        ]\n    }],\n]);\n\nexport default patterns;\n","import patterns from './Patterns';\n\n/**\n * Maps internal drum names to MusicXML instrument names and note display\n */\nexport const drumInstrumentMap = new Map([\n    [\n        'bass', {\n            instr: 'P1-I36',\n            display: ['F', '4'],\n            notehead: '',\n            stem: 'down',\n        }\n    ],\n    [\n        'snare', {\n            instr: 'P1-I39',\n            display: ['C', '5'],\n            notehead: '',\n            stem: 'down',\n        }\n    ],\n    [\n        'hihat-closed', {\n            instr: 'P1-I43',\n            display: ['G', '5'],\n            notehead: 'x',\n            stem: 'up',\n        }\n    ],\n    [\n        // TODO:\n        'hihat-pedal', {\n            instr: 'P1-I45',\n            display: ['', ''],\n            notehead: '',\n            stem: '',\n        }\n    ],\n    [\n        'hihat-open', {\n            instr: 'P1-I47',\n            display: ['E', '5'],\n            notehead: 'x',\n            stem: 'up',\n        }\n    ],\n    [\n        'cymbal-crash', {\n            instr: 'P1-I50',\n            display: ['A', '5'],\n            notehead: 'x',\n            stem: 'up',\n        }\n    ],\n    [\n        'cymbal-ride', {\n            instr: 'P1-I52',\n            display: ['F', '5'],\n            notehead: 'up',\n            stem: 'x',\n        }\n    ],\n    [\n        'cymbal-chinese', {\n            instr: 'P1-I53',\n            display: ['B', '5'],\n            notehead: 'x',\n            stem: 'up',\n        }\n    ],\n    [\n        'cymbal-splash', {\n            instr: 'P1-I56',\n            display: ['B', '5'],\n            notehead: 'x',\n            stem: 'up',\n        }\n    ],\n    [\n        'tom-hi', {\n            instr: 'P1-I51',\n            display: ['F', '5'],\n            notehead: '',\n            stem: 'up',\n        }\n    ],\n    [\n        'tom-mid-hi', {\n            instr: 'P1-I49',\n            display: ['F', '5'],\n            notehead: '',\n            stem: 'up',\n        }\n    ],\n    [\n        'tom-mid-low', {\n            instr: 'P1-I48',\n            display: ['E', '5'],\n            notehead: '',\n            stem: 'up',\n        }\n    ],\n    [\n        'tom-low', {\n            instr: 'P1-I46',\n            display: ['D', '5'],\n            notehead: '',\n            stem: 'up',\n        }\n    ],\n    [\n        'tom-floor-hi', {\n            instr: 'P1-I44',\n            display: ['A', '4'],\n            notehead: '',\n            stem: 'down',\n        }\n    ],\n    [\n        'tom-floor-low', {\n            instr: 'P1-I42',\n            display: ['A', '4'],\n            notehead: '',\n            stem: 'up',\n        }\n    ],\n]);\n\n\n/**\n * Takes a baseline pattern and moves it to the correct position on the fretboard\n *\n * @param {string} patternType pattern type\n * @param {string} rootNote root note\n * @returns {number[][]} array of [string, fret] positions\n */\nexport function generatePattern(patternType, repeat = 1) {\n    const pattern = patterns.get(patternType).hits;\n    if (repeat === 1) {\n        return pattern;\n    }\n    // Repeat with or without alternative direction\n    let result = pattern;\n    if (repeat > 1) {\n        for (let repetition = 1; repetition < repeat; repetition++) {\n            result = [...result, ...pattern];\n        }\n    }\n    // console.log(pattern);\n    return result;\n}\n\n/**\n * Generates MusicXML text from a pattern\n *\n * @param {string} name name\n * @param {number} tempo tempo in bpm\n * @param {string} timeSig time signature e.g. 4/4\n * @param {number[][]} drumHits the output of generatePattern\n */\nexport function generateXml(name, tempo, timeSig, drumHits) {\n    timeSig = timeSig.split('/').map(d => +d);\n    const notesPerMeasure = timeSig[0];\n    let currentMeasure = 1;\n    let currentNoteInMeasure = 1;\n    let measuresString = '';\n    for (const hit of drumHits) {\n        if (currentNoteInMeasure > notesPerMeasure) {\n            // Start new measure\n            currentMeasure++;\n            currentNoteInMeasure = 1;\n            measuresString = `${measuresString}\n            </measure>\n            <measure number=\"${currentMeasure}\">`;\n        }\n        currentNoteInMeasure++;\n        // Get instrument etc.\n        if (hit.length === 1) {\n            const drum = hit[0];\n            // TODO:\n            if (drum === 'rest') {\n                console.warn('rests not handled yet');\n            } else {\n                const details = drumInstrumentMap.get(drum);\n                measuresString = `${measuresString}\n                <note>\n                    <unpitched>\n                        <display-step>${details.display[0]}</display-step>\n                        <display-octave>${details.display[1]}</display-octave>\n                    </unpitched>\n                    <duration>1</duration>\n                    <instrument id=\"${details.instr}\"/>\n                    <voice>1</voice>\n                    <type>quarter</type>\n                    <stem>${details.stem}</stem>${details.notehead === '' ? '' : `\n                    <notehead>${details.notehead}</notehead>`}\n                </note>`;\n            }\n        } else {\n            // Handle 'chords'\n            for (let i = 0; i < hit.length; i++) {\n                const drum = hit[i];\n                const details = drumInstrumentMap.get(drum);\n                measuresString = `${measuresString}\n                <note>${i > 0 ? `\n                    <chord/>`: ''}\n                    <unpitched>\n                        <display-step>${details.display[0]}</display-step>\n                        <display-octave>${details.display[1]}</display-octave>\n                    </unpitched>\n                    <duration>1</duration>\n                    <instrument id=\"${details.instr}\"/>\n                    <voice>1</voice>\n                    <type>quarter</type>\n                    <stem>${details.stem}</stem>${details.notehead === '' ? '' : `\n                    <notehead>${details.notehead}</notehead>`}\n                </note>`;\n            }\n        }\n    }\n\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE score-partwise PUBLIC \"-//Recordare//DTD MusicXML 3.1 Partwise//EN\" \"http://www.musicxml.org/dtds/partwise.dtd\">\n<score-partwise version=\"3.1\">\n  <work>\n    <work-title>Drums</work-title>\n    </work>\n  <identification>\n    <encoding>\n      <software>https://github.com/fheyen/music-exercise-generator</software>\n      </encoding>\n    </identification>\n  <credit page=\"1\">\n    <credit-words default-x=\"595.44\" default-y=\"1626.67\" justify=\"center\" valign=\"top\" font-size=\"24\">${name}</credit-words>\n    </credit>\n  <part-list>\n    <score-part id=\"P1\">\n      <part-name>${name}</part-name>\n      <part-abbreviation>Drs.</part-abbreviation>\n      <score-instrument id=\"P1-I36\">\n        <instrument-name>Acoustic Bass Drum</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I37\">\n        <instrument-name>Bass Drum 1</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I38\">\n        <instrument-name>Side Stick</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I39\">\n        <instrument-name>Acoustic Snare</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I41\">\n        <instrument-name>Electric Snare</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I42\">\n        <instrument-name>Low Floor Tom</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I43\">\n        <instrument-name>Closed Hi-Hat</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I44\">\n        <instrument-name>High Floor Tom</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I45\">\n        <instrument-name>Pedal Hi-Hat</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I46\">\n        <instrument-name>Low Tom</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I47\">\n        <instrument-name>Open Hi-Hat</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I48\">\n        <instrument-name>Low-Mid Tom</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I49\">\n        <instrument-name>Hi-Mid Tom</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I50\">\n        <instrument-name>Crash Cymbal 1</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I51\">\n        <instrument-name>High Tom</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I52\">\n        <instrument-name>Ride Cymbal 1</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I53\">\n        <instrument-name>Chinese Cymbal</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I54\">\n        <instrument-name>Ride Bell</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I55\">\n        <instrument-name>Tambourine</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I56\">\n        <instrument-name>Splash Cymbal</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I57\">\n        <instrument-name>Cowbell</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I58\">\n        <instrument-name>Crash Cymbal 2</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I60\">\n        <instrument-name>Ride Cymbal 2</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I64\">\n        <instrument-name>Open Hi Conga</instrument-name>\n        </score-instrument>\n      <score-instrument id=\"P1-I65\">\n        <instrument-name>Low Conga</instrument-name>\n        </score-instrument>\n      <midi-device port=\"1\"></midi-device>\n      <midi-instrument id=\"P1-I36\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>36</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I37\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>37</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I38\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>38</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I39\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>39</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I41\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>41</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I42\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>42</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I43\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>43</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I44\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>44</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I45\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>45</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I46\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>46</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I47\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>47</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I48\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>48</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I49\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>49</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I50\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>50</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I51\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>51</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I52\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>52</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I53\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>53</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I54\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>54</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I55\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>55</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I56\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>56</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I57\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>57</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I58\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>58</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I60\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>60</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I64\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>64</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      <midi-instrument id=\"P1-I65\">\n        <midi-channel>10</midi-channel>\n        <midi-program>1</midi-program>\n        <midi-unpitched>65</midi-unpitched>\n        <volume>78.7402</volume>\n        <pan>0</pan>\n        </midi-instrument>\n      </score-part>\n    </part-list>\n  <part id=\"P1\">\n    <measure number=\"1\" width=\"309.39\">\n      <print>\n        <system-layout>\n          <system-margins>\n            <left-margin>0.00</left-margin>\n            <right-margin>-0.00</right-margin>\n            </system-margins>\n          <top-system-distance>170.00</top-system-distance>\n          </system-layout>\n        </print>\n      <attributes>\n        <divisions>1</divisions>\n        <key>\n          <fifths>0</fifths>\n          </key>\n        <time>\n          <beats>${timeSig[0]}</beats>\n          <beat-type>${timeSig[1]}</beat-type>\n          </time>\n        <clef>\n          <sign>percussion</sign>\n          <line>2</line>\n          </clef>\n        </attributes>\n      <direction placement=\"above\">\n        <direction-type>\n          <metronome parentheses=\"no\" default-x=\"-35.96\" relative-y=\"20.00\">\n            <beat-unit>quarter</beat-unit>\n            <per-minute>${tempo}</per-minute>\n            </metronome>\n          </direction-type>\n        <sound tempo=\"${tempo}\"/>\n        </direction>\n        ${measuresString}\n      </measure>\n    </part>\n  </score-partwise>`;\n}\n","import './Drums.css';\nimport React, { PureComponent } from 'react';\nimport { generatePattern, generateXml } from './MusicXmlGenerator';\nimport patterns from './Patterns';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faToggleOff, faToggleOn } from '@fortawesome/free-solid-svg-icons';\nimport { Utils } from 'musicvis-lib';\nimport { downloadXml } from '../lib';\n\nclass Drums extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: 'Snare only',\n            tempo: 120,\n            repeat: 4,\n            currentAnimationPosition: null,\n        };\n    }\n\n    // /**\n    //  * Animates the fretboard\n    //  * @param {number} index\n    //  * @param {number[][]} pattern\n    //  * @param {number} tempo\n    //  */\n    // animate(index, pattern, tempo) {\n    //     if (index > pattern.length - 1) {\n    //         this.setState({ currentAnimationPosition: null });\n    //         return;\n    //     }\n    //     const [string, fret] = pattern[index];\n    //     this.setState({ currentAnimationPosition: [string, fret] });\n    //     const wait = Utils.bpmToSecondsPerBeat(tempo) * 1000;\n    //     window.setTimeout(\n    //         () => this.animate(index + 1, pattern, tempo),\n    //         wait\n    //     );\n    // }\n\n    /**\n     * Creates a downloadable MusicXML file\n     */\n    download = () => {\n        const { type, tempo, repeat } = this.state;\n        // Generate pattern\n        const pattern = generatePattern(type, repeat);\n        // Generate XML\n        const name = `[Drums Exercise] ${type} ${tempo} bpm`;\n        const text = generateXml(name, tempo, '4/4', pattern);\n        // Download text file\n        const fileName = `${name}.musicxml`;\n        downloadXml(fileName, text);\n    };\n\n    render() {\n        const { type, tempo, repeat, currentAnimationPosition: currPos } = this.state;\n        // Generate pattern\n        const pattern = generatePattern(type, repeat);\n\n        // Create tab note-by-note\n        const timeRowMatrix = [];\n        const positions = ['hihat-closed', 'hihat-pedal', 'hihat-open', 'cymbal-crash', 'cymbal-ride', 'cymbal-chinese', 'cymbal-splash', 'snare', 'tom-hi', 'tom-mid-hi', 'tom-mid-low', 'tom-low', 'tom-floor-hi', 'tom-floor-low', 'bass'];\n        const labels = ['HHc', 'HHp', 'HHo', 'CrC', 'RC ', 'ChC', 'SpC', 'SN ', 'HT ', 'MHT', 'MLT', 'LT ', 'FTH', 'FTL', 'BD '];\n        timeRowMatrix.push(labels);\n        for (const drumHits of pattern) {\n            const timeSlice = Array.from({ length: positions.length }).fill('--');\n            for (const hit of drumHits) {\n                const row = positions.indexOf(hit);\n                timeSlice[row] = `x-`;\n            }\n            timeRowMatrix.push(timeSlice);\n        }\n        // Transform into string row-by-row\n        let tab = `tempo = ${tempo} bpm\\n`;\n        const notesPerMeaure = 4;\n        for (let row = 0; row < positions.length; row++) {\n            // Measure lines\n            let noteOfMeasure = 0;\n            for (let time = 0; time < timeRowMatrix.length; time++) {\n                tab = `${tab}${timeRowMatrix[time][row]}`;\n                if (noteOfMeasure === notesPerMeaure && time < timeRowMatrix.length - 1) {\n                    noteOfMeasure = 0;\n                    tab = `${tab}|-`;\n                }\n                noteOfMeasure++;\n            }\n            tab = `${tab}\\n`;\n        }\n        // Options for pattern type\n        const typeOptions = [];\n        for (const [key, value] of patterns) {\n            typeOptions.push(\n                <option key={key} value={key}>\n                    {value.name}\n                </option>\n            );\n        }\n        // HTML\n        return (\n            <div className=\"App\">\n                <h2>Options</h2>\n                <div>\n                    <label>\n                        Type\n                        <select onChange={event => this.setState({ type: event.target.value })}>\n                            {typeOptions}\n                        </select>\n                    </label>\n                    <label>\n                        Tempo (bpm)\n                        <input\n                            type='number'\n                            min='30'\n                            max='200'\n                            step='5'\n                            defaultValue='120'\n                            onInput={e => this.setState({ tempo: +e.target.value })}\n                        />\n                    </label>\n                    <label>\n                        Repeat\n                        <input\n                            type='number'\n                            min='1'\n                            max='20'\n                            step='1'\n                            defaultValue='4'\n                            onInput={e => this.setState({ repeat: +e.target.value })}\n                        />\n                    </label>\n                </div>\n                <h2>Output</h2>\n                <div>\n                    <button onClick={this.download}>\n                        Download MusicXML\n                    </button>\n                </div>\n                <div>\n                    <h3>Tab Preview</h3>\n                    <textarea value={tab} readOnly>\n                    </textarea>\n                    {/* <button\n                        onClick={() => this.animate(0, pattern, tempo)}\n                        disabled={currPos !== null}\n                        title='Play the pattern on the fretboard at the set tempo'\n                    >\n                        Animate\n                    </button> */}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Drums;\n","import './App.css';\nimport React, { PureComponent } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport Guitar from './guitar/Guitar';\nimport Piano from './piano/Piano';\nimport Drums from './drums/Drums';\n\nclass App extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentInstrument: '',\n        };\n    }\n\n    render() {\n        const { currentInstrument } = this.state;\n        return (\n            <div className='App'>\n                <h1>Music Exercise Generator</h1>\n                <p>Choose an instrument!</p>\n                <div>\n                    {['Guitar', 'Piano', 'Drums', 'Ukulele'].map(d => (\n                        <button\n                            key={d}\n                            onClick={() => this.setState({ currentInstrument: d })}\n                            className={currentInstrument === d ? 'active' : ''}\n                        >\n                            {d}\n                        </button>\n                    ))}\n                </div>\n                <div>\n                    {\n                        currentInstrument === 'Guitar' && <Guitar />\n                    }\n                    {\n                        currentInstrument === 'Piano' && <Piano />\n                    }\n                    {\n                        currentInstrument === 'Drums' && <Drums />\n                    }\n                    {\n                        currentInstrument === 'Ukulele' && <h2>Coming soon!</h2>\n                    }\n                </div>\n                <div className='githubLink'>\n                    <a href='https://github.com/fheyen/music-exercise-generator'>\n                        <FontAwesomeIcon icon={faGithub} />&nbsp;\n                        https://github.com/fheyen/music-exercise-generator\n                     </a>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}