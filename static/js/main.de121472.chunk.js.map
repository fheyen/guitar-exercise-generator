{"version":3,"sources":["Patterns.js","MusicXmlGenerator.js","App.js","index.js"],"names":["patterns","Map","name","rootNotePositions","positions","Array","from","length","flatMap","d","string","map","fret","generatePattern","patternType","rootNote","repeat","alternate","pattern","get","rootPos","indexOf","shiftedToRoot","result","reversed","reverse","repetition","console","log","App","props","download","state","type","tempo","timeSig","text","notesPerMeasure","split","currentMeasure","currentNoteInMeasure","measuresString","tuning","Guitar","stringedTunings","note","getNoteInfoFromFretboardPos","octave","generateXml","fileName","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","textTab","fretboard","currentAnimationPosition","this","renderPreview","prevProps","prevState","timeStringMatrix","push","position","timeSlice","str","tab","notesPerMeaure","noteOfMeasure","time","pattern2","entries","i","setState","index","wait","Utils","bpmToSecondsPerBeat","window","setTimeout","animate","currPos","typeOptions","key","value","stringNotes","hString","hFret","board","row","cName","className","onChange","event","target","min","max","step","defaultValue","onInput","e","onClick","icon","faToggleOn","faToggleOff","readOnly","disabled","title","href","faGithub","PureComponent","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.de121472.chunk.js","sourcesContent":["/**\n * Contains patterns for exercises, such as scales\n */\nconst patterns = new Map([\n    ['pentatonic C type', {\n        name: 'Pentatonic scale C type',\n        rootNotePositions: ['A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A'],\n        // String fret pairs, strings are 0 (E4) to 5 (E2)\n        positions: [\n            [6, 1],\n            [6, 3],\n            [5, 1],\n            [5, 3],\n            [4, 0],\n            [4, 2],\n            [3, 0],\n            [3, 2],\n            [2, 1],\n            [2, 3],\n            [1, 0],\n            [1, 3],\n        ]\n    }],\n    ['pentatonic A type', {\n        name: 'Pentatonic scale A type',\n        rootNotePositions: ['A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A'],\n        // String fret pairs, strings are 0 (E4) to 5 (E2)\n        positions: [\n            [6, 1],\n            [6, 3],\n            [5, 1],\n            [5, 3],\n            [4, 0],\n            [4, 3],\n            [3, 0],\n            [3, 3],\n            [2, 1],\n            [2, 3],\n            [1, 1],\n            [1, 3],\n        ]\n    }],\n    ['pentatonic G type', {\n        name: 'Pentatonic scale G type',\n        rootNotePositions: ['G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#'],\n        // String fret pairs, strings are 0 (E4) to 5 (E2)\n        positions: [\n            [6, 0],\n            [6, 3],\n            [5, 0],\n            [5, 2],\n            [4, 0],\n            [4, 2],\n            [3, 0],\n            [3, 2],\n            [2, 0],\n            [2, 3],\n            [1, 0],\n            [1, 3],\n        ]\n    }],\n    ['pentatonic E type', {\n        name: 'Pentatonic scale E type',\n        rootNotePositions: ['F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E'],\n        // String fret pairs, strings are 0 (E4) to 5 (E2)\n        positions: [\n            [6, 1],\n            [6, 3],\n            [5, 0],\n            [5, 3],\n            [4, 0],\n            [4, 3],\n            [3, 0],\n            [3, 2],\n            [2, 1],\n            [2, 3],\n            [1, 1],\n            [1, 3],\n        ]\n    }],\n    ['pentatonic D type', {\n        name: 'Pentatonic scale D type',\n        rootNotePositions: ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#'],\n        // String fret pairs, strings are 0 (E4) to 5 (E2)\n        positions: [\n            [6, 1],\n            [6, 3],\n            [5, 1],\n            [5, 3],\n            [4, 1],\n            [4, 3],\n            [3, 0],\n            [3, 3],\n            [2, 1],\n            [2, 4],\n            [1, 1],\n            [1, 3],\n        ]\n    }],\n    ['pentatonic all', {\n        name: 'Pentatonic scale all',\n        rootNotePositions: ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'],\n        // String fret pairs, strings are 0 (E4) to 5 (E2)\n        positions: [\n            // C\n            [6, 0],\n            [6, 3],\n            [5, 0],\n            [5, 3],\n            [4, 0],\n            [4, 2],\n            [3, 0],\n            [3, 2],\n            [2, 1],\n            [2, 3],\n            [1, 0],\n            [1, 3],\n            // A\n            [6, 3],\n            [6, 5],\n            [5, 3],\n            [5, 5],\n            [4, 2],\n            [4, 5],\n            [3, 2],\n            [3, 5],\n            [2, 3],\n            [2, 5],\n            [1, 3],\n            [1, 5],\n            // G\n            [6, 5],\n            [6, 8],\n            [5, 5],\n            [5, 7],\n            [4, 5],\n            [4, 7],\n            [3, 5],\n            [3, 7],\n            [2, 5],\n            [2, 8],\n            [1, 5],\n            [1, 8],\n            // E\n            [6, 8],\n            [6, 10],\n            [5, 7],\n            [5, 10],\n            [4, 7],\n            [4, 9],\n            [3, 7],\n            [3, 9],\n            [2, 8],\n            [2, 10],\n            [1, 8],\n            [1, 10],\n            // D\n            [6, 10],\n            [6, 12],\n            [5, 10],\n            [5, 12],\n            [4, 10],\n            [4, 12],\n            [3, 9],\n            [3, 12],\n            [2, 10],\n            [2, 13],\n            [1, 10],\n            [1, 12],\n            // C\n            [6, 12],\n            [6, 15],\n            [5, 12],\n            [5, 15],\n            [4, 12],\n            [4, 14],\n            [3, 12],\n            [3, 14],\n            [2, 13],\n            [2, 15],\n            [1, 12],\n            [1, 15],\n        ],\n    }],\n\n    /**\n     * Heptatonic scales\n     */\n    ['haptatonic C type', {\n        name: 'Heptatonic scale C type',\n        rootNotePositions: ['A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A'],\n        // String fret pairs, strings are 0 (E4) to 5 (E2)\n        positions: [\n            [6, 1],\n            [6, 3],\n            [5, 1],\n            [5, 3],\n            [4, 0],\n            [4, 2],\n            [3, 0],\n            [3, 2],\n            [2, 1],\n            [2, 3],\n            [1, 0],\n            [1, 3],\n        ]\n    }],\n\n    // TODO: other heptatonic patterns\n    // TODO: all heptatonic patterns in one\n\n    /**\n     * Rows\n     */\n    ['rows of 4, left-right', {\n        name: 'Rows left-right',\n        rootNotePositions: ['E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#'],\n        positions: Array.from({ length: 6 }).flatMap((d, string) =>\n            Array.from({ length: 4 }).map((d, fret) => [6 - string, fret])\n        )\n    }],\n    ['rows of 4, right-left', {\n        name: 'Rows right-left',\n        rootNotePositions: ['E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#'],\n        positions: Array.from({ length: 6 }).flatMap((d, string) =>\n            Array.from({ length: 4 }).map((d, fret) => [6 - string, 3 - fret])\n        )\n    }],\n    ['rows of 4, left-right and right-left', {\n        name: 'Rows left-right and right-left',\n        rootNotePositions: ['E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#'],\n        positions: Array.from({ length: 6 }).flatMap((d, string) =>\n            Array.from({ length: 4 }).map((d, fret) => [6 - string, string % 2 === 0 ? fret : 3 - fret])\n        )\n    }],\n]);\n\nexport default patterns;\n","import patterns from './Patterns';\nimport { Guitar } from 'musicvis-lib';\n\n\n/**\n * Takes a baseline pattern and moves it to the correct position on the fretboard\n *\n * @param {string} patternType pattern type\n * @param {string} rootNote root note\n * @returns {number[][]} array of [string, fret] positions\n */\nexport function generatePattern(patternType, rootNote = 'A', repeat = 1, alternate = false) {\n    const pattern = patterns.get(patternType);\n    const rootPos = pattern.rootNotePositions.indexOf(rootNote);\n    const shiftedToRoot = pattern.positions.map(d => {\n        const [string, fret] = d;\n        return [string, fret + rootPos];\n    });\n    if (repeat === 1) {\n        return shiftedToRoot;\n    }\n    // Repeat with or without alternative diraction\n    let result = shiftedToRoot;\n    if (repeat > 1) {\n        let reversed = [...shiftedToRoot].reverse();\n        for (let repetition = 1; repetition < repeat; repetition++) {\n            if (alternate && repetition % 2 === 1) {\n                result = [...result, ...reversed];\n            } else {\n                result = [...result, ...shiftedToRoot];\n            }\n        }\n    }\n    console.log(pattern);\n    return result;\n}\n\n/**\n * Generates MusicXML text from a pattern\n *\n * @param {string} name name\n * @param {number} tempo tempo in bpm\n * @param {string} timeSig time signature e.g. 4/4\n * @param {number[][]} positions the output of generatePattern\n */\nexport function generateXml(name, tempo, timeSig, positions) {\n    timeSig = timeSig.split('/').map(d => +d);\n    const notesPerMeasure = timeSig[0];\n    let currentMeasure = 1;\n    let currentNoteInMeasure = 1;\n    let measuresString = '';\n    for (const [string, fret] of positions) {\n        if (currentNoteInMeasure > notesPerMeasure) {\n            // Start new measure\n            currentMeasure++;\n            currentNoteInMeasure = 1;\n            measuresString = `${measuresString}\n            </measure>\n            <measure number=\"${currentMeasure}\">`;\n        }\n        currentNoteInMeasure++;\n        // Get note and octave from position\n        const tuning = Guitar.stringedTunings.get('Guitar').get(6)[0];\n        const note = Guitar.getNoteInfoFromFretboardPos(string, fret, tuning);\n        measuresString = `${measuresString}\n            <note>\n                <pitch>\n                    <step>${note.name}</step>\n                    <octave>${note.octave}</octave>\n                </pitch>\n                <notations>\n                    <technical>\n                        <fret>${fret}</fret>\n                        <string>${string}</string>\n                    </technical>\n                </notations>\n                <voice>1</voice>\n                <duration>960</duration>\n                <type>quarter</type>\n            </note>`;\n    }\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n<score-partwise>\n    <work>\n        <work-title />\n    </work>\n    <identification>\n        <encoding>\n            <software>https://github.com/fheyen/guitar-exercise-generator</software>\n        </encoding>\n    </identification>\n    <part-list>\n        <score-part id=\"P1\">\n            <part-name>${name}</part-name>\n            <score-instrument id=\"P1-I1\">\n                <instrument-name>Steel String Guitar 1</instrument-name>\n            </score-instrument>\n            <midi-instrument id=\"P1-I1\">\n                <midi-channel>1</midi-channel>\n                <midi-program>26</midi-program>\n            </midi-instrument>\n        </score-part>\n    </part-list>\n    <part id=\"P1\">\n        <measure number=\"1\">\n            <attributes>\n                <divisions>960</divisions>\n                <key>\n                    <fifths>0</fifths>\n                    <mode>major</mode>\n                </key>\n                <clef>\n                    <sign>G</sign>\n                    <line>2</line>\n                </clef>\n                <time>\n                    <beats>${timeSig[0]}</beats>\n                    <beat-type>${timeSig[1]}</beat-type>\n                </time>\n                <staff-details>\n                    <staff-lines>6</staff-lines>\n                    <staff-tuning line=\"1\">\n                        <tuning-step>E</tuning-step>\n                        <tuning-octave>3</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"2\">\n                        <tuning-step>A</tuning-step>\n                        <tuning-octave>3</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"3\">\n                        <tuning-step>D</tuning-step>\n                        <tuning-octave>4</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"4\">\n                        <tuning-step>G</tuning-step>\n                        <tuning-octave>4</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"5\">\n                        <tuning-step>B</tuning-step>\n                        <tuning-octave>4</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"6\">\n                        <tuning-step>E</tuning-step>\n                        <tuning-octave>5</tuning-octave>\n                    </staff-tuning>\n                </staff-details>\n            </attributes>\n            <direction placement=\"above\">\n                <sound tempo=\"${tempo}\" />\n            </direction>\n           ${measuresString}\n        </measure>\n    </part>\n</score-partwise>\n`;\n}\n","import './App.css';\nimport React, { PureComponent } from 'react';\nimport { generatePattern, generateXml } from './MusicXmlGenerator';\nimport patterns from './Patterns';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { faToggleOff, faToggleOn } from '@fortawesome/free-solid-svg-icons';\nimport { Utils } from 'musicvis-lib';\n\nclass App extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: 'pentatonic G type',\n            rootNote: 'C',\n            tempo: 120,\n            timeSig: '4/4',\n            repeat: 4,\n            alternate: true,\n            textTab: '',\n            fretboard: [[]],\n            pattern: [],\n            currentAnimationPosition: null,\n        };\n    }\n\n    componentDidMount() {\n        this.renderPreview();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (\n            prevState.type !== this.state.type ||\n            prevState.rootNote !== this.state.rootNote ||\n            prevState.tempo !== this.state.tempo ||\n            prevState.timeSig !== this.state.timeSig ||\n            prevState.repeat !== this.state.repeat ||\n            prevState.alternate !== this.state.alternate\n        ) {\n            this.renderPreview();\n        }\n    }\n\n    /**\n     * Renders a preview as text tab\n     */\n    renderPreview() {\n        const { type, rootNote, tempo, timeSig, repeat, alternate } = this.state;\n        // Generate pattern\n        const pattern = generatePattern(type, rootNote, repeat, alternate);\n\n        // Create tab note-by-note\n        const timeStringMatrix = [];\n        timeStringMatrix.push(['e -', 'B -', 'G -', 'D -', 'A -', 'E -']);\n        for (const position of pattern) {\n            const [string, fret] = position;\n            const timeSlice = Array.from({ length: 6 });\n            for (let str = 1; str <= 6; str++) {\n                if (str === string) {\n                    timeSlice[str - 1] = `${fret}-`;\n                } else {\n                    timeSlice[str - 1] = fret > 9 ? '---' : '--';\n                }\n            }\n            timeStringMatrix.push(timeSlice);\n        }\n        // Transform into string row-by-row\n        let tab = `tempo = ${tempo} bpm\\n`;\n        const notesPerMeaure = +timeSig.split('/')[0];\n        for (let string = 0; string < 6; string++) {\n            // Measure lines\n            let noteOfMeasure = 0;\n            for (let time = 0; time < timeStringMatrix.length; time++) {\n                tab = `${tab}${timeStringMatrix[time][string]}`;\n                if (noteOfMeasure === notesPerMeaure && time < timeStringMatrix.length - 1) {\n                    noteOfMeasure = 0;\n                    tab = `${tab}|-`;\n                }\n                noteOfMeasure++;\n            }\n            tab = `${tab}\\n`;\n        }\n\n        // Create fretboard preview\n        const pattern2 = generatePattern(type, rootNote);\n        const fretboard = Array.from({ length: 6 }).map(() => Array.from({ length: 25 }));\n        for (const [i, position] of pattern2.entries()) {\n            const [string, fret] = position;\n            fretboard[string - 1][fret] = i + 1;\n            // fretboard[string - 1][fret + 12] = i + 1 + pattern2.length;\n        }\n\n        // Update state to draw\n        this.setState({\n            textTab: tab,\n            pattern: pattern2,\n            fretboard,\n        });\n    }\n\n    /**\n     * Animates the fretboard\n     * @param {*} index\n     */\n    animate(index) {\n        const { pattern, tempo } = this.state;\n        if (index > pattern.length - 1) {\n            this.setState({ currentAnimationPosition: null });\n            return;\n        }\n        const [string, fret] = pattern[index];\n        this.setState({ currentAnimationPosition: [string, fret] });\n        const wait = Utils.bpmToSecondsPerBeat(tempo) * 1000;\n        window.setTimeout(() => this.animate(index + 1), wait);\n    }\n\n    /**\n     * Creates a downloadable MusicXML file\n     */\n    download = () => {\n        const { type, rootNote, tempo, timeSig, repeat, alternate } = this.state;\n        // Generate pattern\n        const pattern = generatePattern(type, rootNote, repeat, alternate);\n        // Generate XML\n        const name = `[Guitar Exercise] ${rootNote} ${type} ${tempo} bpm`;\n        const text = generateXml(name, tempo, timeSig, pattern);\n        // Download text file\n        const fileName = `${name}.musicxml`;\n        const element = document.createElement('a');\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n        element.setAttribute('download', fileName);\n        element.style.display = 'none';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n    };\n\n    render() {\n        const { currentAnimationPosition: currPos, fretboard } = this.state;\n        // Options for pattenr type\n        const typeOptions = [];\n        for (const [key, value] of patterns) {\n            typeOptions.push(\n                <option key={key} value={key}>\n                    {value.name}\n                </option>\n            );\n        }\n        // Transform fretboard preview into JSX table\n        const stringNotes = ['e', 'B', 'G', 'D', 'A', 'E'];\n        const [hString, hFret] = currPos ?? [-1, -1];\n        const board = fretboard.map((row, string) => {\n            return (\n                <tr>\n                    <td key='note'>{stringNotes[string]}</td>\n                    {row.map((value, fret) => {\n                        let cName = '';\n                        if (string + 1 === hString && fret == hFret) {\n                            cName = 'highlight';\n                        }\n                        return (\n                            <td\n                                key={`${string} ${fret} ${value}`}\n                                className={cName}\n                            >\n                                {value}\n                            </td>\n                        );\n                    })}\n                </tr>\n            );\n        });\n        return (\n            <div className=\"App\">\n                <h1>Guitar Exercise Generator</h1>\n                <h2>Options</h2>\n                <div>\n                    <label>\n                        Type\n                        <select onChange={event => this.setState({ type: event.target.value })}>\n                            {typeOptions}\n                        </select>\n                    </label>\n                    <label>\n                        Root note\n                        <select onChange={event => this.setState({ rootNote: event.target.value })}>\n                            {['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'].map(d => (\n                                <option key={d} value={d}>\n                                    {d}\n                                </option>\n                            ))}\n                        </select>\n                    </label>\n                    <label>\n                        Tempo (bpm)\n                        <input\n                            type='number'\n                            min='30'\n                            max='200'\n                            step='5'\n                            defaultValue='120'\n                            onInput={e => this.setState({ tempo: +e.target.value })}\n                        />\n                    </label>\n                    <label>\n                        Time signature\n                        <select onChange={event => this.setState({ timeSig: event.target.value })}>\n                            {['4/4', '3/4', '2/4'].map(d => (\n                                <option key={d} value={d}>\n                                    {d}\n                                </option>\n                            ))}\n                        </select>\n                    </label>\n                    <label>\n                        Repeat\n                        <input\n                            type='number'\n                            min='1'\n                            max='20'\n                            step='1'\n                            defaultValue='4'\n                            onInput={e => this.setState({ repeat: +e.target.value })}\n                        />\n                    </label>\n                    <label>\n                        <button onClick={() => this.setState({ alternate: !this.state.alternate })}>\n                            Alternate <FontAwesomeIcon icon={this.state.alternate ? faToggleOn : faToggleOff} />\n                        </button>\n                    </label>\n                </div>\n                <h2>Output</h2>\n                <div>\n                    <button onClick={this.download}>\n                        Download MusicXML\n                    </button>\n                </div>\n                <div>\n                    <h3>Tab Preview</h3>\n                    <textarea value={this.state.textTab} readOnly>\n                    </textarea>\n                    <h3>Fretboard Preview</h3>\n                    <table>\n                        <tbody>\n                            {board}\n                            <tr>\n                                <td></td>\n                                {Array.from({ length: 25 }).map((d, i) => (\n                                    <td>{i}</td>\n                                ))}\n                            </tr>\n                        </tbody>\n                    </table>\n                    <button\n                        onClick={() => this.animate(0)}\n                        disabled={currPos !== null}\n                        title='Play the pattern on the fretboard at the set tempo'\n                    >\n                        Animate\n                    </button>\n                </div>\n                <div className='githubLink'>\n                    <a href='https://github.com/fheyen/guitar-exercise-generator'>\n                        <FontAwesomeIcon icon={faGithub} />&nbsp;\n                        https://github.com/fheyen/guitar-exercise-generator\n                     </a>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}