{"version":3,"sources":["Patterns.js","App.js","MusicXmlGenerator.js","index.js"],"names":["patterns","Map","name","positions","App","props","download","state","type","rootNote","tempo","timeSig","pattern","patternType","rootPos","indexOf","get","map","d","generatePattern","text","notesPerMeasure","split","currentMeasure","currentNoteInMeasure","measuresString","string","fret","tuning","Guitar","stringedTunings","note","getNoteInfoFromFretboardPos","octave","generateXml","fileName","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","className","onChange","event","setState","target","value","min","max","onInput","e","onClick","this","PureComponent","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.144087b4.chunk.js","sourcesContent":["const patterns = new Map([\n    ['pentatonic', {\n        name: 'Pentatonic Scale (6 strings)',\n        // String fret pairs, strings are 0 (E4) to 5 (E2)\n        positions: [\n            [6, 0],\n            [6, 3],\n            [5, 0],\n            [5, 2],\n            [4, 0],\n            [4, 2],\n            [3, 0],\n            [3, 2],\n            [2, 0],\n            [2, 3],\n            [1, 0],\n            [1, 3],\n        ]\n    }],\n]);\n\nexport default patterns;\n","import './App.css';\nimport React, { PureComponent } from 'react';\nimport { generatePattern, generateXml } from './MusicXmlGenerator';\n\nclass App extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: 'pentatonic',\n            rootNote: 'C',\n            tempo: 120,\n            timeSig: '4/4',\n        };\n    }\n\n    /**\n     * Creates a downloadable MusicXML file\n     */\n    download = () => {\n        const { type, rootNote, tempo, timeSig } = this.state;\n        // Generate XML\n        const pattern = generatePattern(type, rootNote);\n        const name = `[Guitar Exercise] ${rootNote} ${type} ${tempo} bpm`;\n        const text = generateXml(name, tempo, timeSig, pattern);\n\n        // Download text file\n        const fileName = `${name}.musicxml`;\n        const element = document.createElement('a');\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n        element.setAttribute('download', fileName);\n        element.style.display = 'none';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Guitar Exercise Generator</h1>\n                <h2>Options</h2>\n                <div>\n                    <label>\n                        Type\n                        <select onChange={event => this.setState({ type: event.target.value })}>\n                            <option value='pentatonic'>\n                                Pentatonic Scale\n                        </option>\n                            <option value='heptatonic'>\n                                Heptatonic Scale\n                        </option>\n                        </select>\n                    </label>\n                    <label>\n                        Root note\n                        <select onChange={event => this.setState({ rootNote: event.target.value })}>\n                            {['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'].map(d => (\n                                <option key={d} value={d}>\n                                    {d}\n                                </option>\n                            ))}\n                        </select>\n                    </label>\n                    <label>\n                        Tempo (bpm)\n                        <input\n                            type='number'\n                            min='30'\n                            max='200'\n                            value='120'\n                            onInput={e => this.setState({ tempo: +e.target.value })}\n                        />\n                    </label>\n                    <label>\n                        Time signature\n                        <select onChange={event => this.setState({ timeSig: event.target.value })}>\n                            {['4/4', '3/4', '2/4'].map(d => (\n                                <option key={d} value={d}>\n                                    {d}\n                                </option>\n                            ))}\n                        </select>\n                    </label>\n                </div>\n                <h2>Output</h2>\n                <div>\n                    <button onClick={this.download}>\n                        Download MusicXML\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import patterns from './Patterns';\nimport { Guitar } from 'musicvis-lib';\n\n/**\n * Takes a baseline pattern and moves it to the correct position on the fretboard\n *\n * @param {string} patternType pattern type\n * @param {string} rootNote root note\n * @returns {number[][]} array of [string, fret] positions\n */\nexport function generatePattern(patternType, rootNote = 'A') {\n    const rootNotePositions = ['E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#'];\n    const rootPos = rootNotePositions.indexOf(rootNote);\n    const pattern = patterns.get(patternType);\n    const shiftedToRoot = pattern.positions.map(d => {\n        const [string, fret] = d;\n        return [string, fret + rootPos];\n    });\n    return shiftedToRoot;\n}\n\n/**\n * Generates MusicXML text from a pattern\n *\n * @param {string} name name\n * @param {number} tempo tempo in bpm\n * @param {string} timeSig time signature e.g. 4/4\n * @param {number[][]} positions the output of generatePattern\n */\nexport function generateXml(name, tempo, timeSig, positions) {\n    timeSig = timeSig.split('/').map(d => +d);\n    const notesPerMeasure = timeSig[0];\n    let currentMeasure = 1;\n    let currentNoteInMeasure = 1;\n    let measuresString = '';\n    for (const [string, fret] of positions) {\n        if (currentNoteInMeasure > notesPerMeasure) {\n            // Start new measure\n            currentMeasure++;\n            currentNoteInMeasure = 1;\n            measuresString = `${measuresString}\n            </measure>\n            <measure number=\"${currentMeasure}\">`;\n        }\n        currentNoteInMeasure++;\n        // Get note and octave from position\n        const tuning = Guitar.stringedTunings.get('Guitar').get(6)[0];\n        const note = Guitar.getNoteInfoFromFretboardPos(string, fret, tuning);\n        measuresString = `${measuresString}\n            <note>\n                <pitch>\n                    <step>${note.name}</step>\n                    <octave>${note.octave}</octave>\n                </pitch>\n                <notations>\n                    <technical>\n                        <fret>${fret}</fret>\n                        <string>${string}</string>\n                    </technical>\n                </notations>\n                <voice>1</voice>\n                <duration>960</duration>\n                <type>quarter</type>\n            </note>`;\n    }\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n<score-partwise>\n    <work>\n        <work-title />\n    </work>\n    <identification>\n        <encoding>\n            <software>https://github.com/fheyen/guitar-exercise-generator</software>\n        </encoding>\n    </identification>\n    <part-list>\n        <score-part id=\"P1\">\n            <part-name>${name}</part-name>\n            <score-instrument id=\"P1-I1\">\n                <instrument-name>Steel String Guitar 1</instrument-name>\n            </score-instrument>\n            <midi-instrument id=\"P1-I1\">\n                <midi-channel>1</midi-channel>\n                <midi-program>26</midi-program>\n            </midi-instrument>\n        </score-part>\n    </part-list>\n    <part id=\"P1\">\n        <measure number=\"1\">\n            <attributes>\n                <divisions>960</divisions>\n                <key>\n                    <fifths>0</fifths>\n                    <mode>major</mode>\n                </key>\n                <clef>\n                    <sign>G</sign>\n                    <line>2</line>\n                </clef>\n                <time>\n                    <beats>${timeSig[0]}</beats>\n                    <beat-type>${timeSig[1]}</beat-type>\n                </time>\n                <staff-details>\n                    <staff-lines>6</staff-lines>\n                    <staff-tuning line=\"1\">\n                        <tuning-step>E</tuning-step>\n                        <tuning-octave>3</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"2\">\n                        <tuning-step>A</tuning-step>\n                        <tuning-octave>3</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"3\">\n                        <tuning-step>D</tuning-step>\n                        <tuning-octave>4</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"4\">\n                        <tuning-step>G</tuning-step>\n                        <tuning-octave>4</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"5\">\n                        <tuning-step>B</tuning-step>\n                        <tuning-octave>4</tuning-octave>\n                    </staff-tuning>\n                    <staff-tuning line=\"6\">\n                        <tuning-step>E</tuning-step>\n                        <tuning-octave>5</tuning-octave>\n                    </staff-tuning>\n                </staff-details>\n            </attributes>\n            <direction placement=\"above\">\n                <sound tempo=\"${tempo}\" />\n            </direction>\n           ${measuresString}\n        </measure>\n    </part>\n</score-partwise>\n`;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}